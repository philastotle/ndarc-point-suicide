'Suicide_Plan_jump_train',
'Suicide_Plan_hang',
'Suicide_Plan_od_heroin',
'Suicide_Plan_od_op',
'Suicide_Plan_choke',
'Suicide_Plan_drown',
'Suicide_Plan_Other',
'Suicide_Attempt_ever',
'Suicide_Attempt_Num',
'Suicide_Attempt_First_Age',
'Suicide_Attempt_Mthd_12m',
'Suicide_Attempt_gun',
'Suicide_Attempt_carb_monox',
'Suicide_Attempt_cut_stab',
'Suicide_Attempt_pills',
'Suicide_Attempt_jump_hght',
'Suicide_Attempt_jump_train',
'Suicide_Attempt_hang',
'Suicide_Attempt_od_heroin',
'Suicide_Attempt_od_op',
'Suicide_Attempt_choke',
'Suicide_Attempt_drown',
'Suicide_Attempt_other',
'Suicide_Attempt_other_sp',
'Suicide_Statements',
'Suicidal_Thoughts_Ever',
'Suicidal_Plans_Ever',
'Suicide_Attempts_Ever',
'Suicidal_Thoughts_12m',
'Suicide_Attempts_12m')
################################################################################
# make core wide
library(reshape)
core_wide <- reshape(core, idvar="Participant_ID", timevar="wave",direction ="wide");
################################################################################
# find missing proportions
missings <- as.data.frame(colSums(is.na(core_suicide)))
################################################################################
# make core wide
core_wide <- reshape(core, idvar="Participant_ID", timevar="wave",direction ="wide");
################################################################################
# right merge suicide df to core
core_suicide <- merge(x = core_wide, y = suicide_df, by = "Participant_ID")
################################################################################
# find missing proportions
missings <- as.data.frame(colSums(is.na(core_suicide)))
View(missings)
missings <- colSums(is.na(core_suicide))
missings <- order(missings)
################################################################################
# find missing proportions
missings <- colSums(is.na(core_suicide))
order <- missings[order(missings),]
sort(missings)
?sort
missings <- sort(missings, decreasing = TRUE)
missings
o_fifty <- missings > (1514/2)
o_fifty
ofifty <- missings[o_fifty]
ofifty
write(ofifty, "overfifty.txt")
ofifty[,1]
ofifty[1]
ofifty[1,1]
ofifty[2]
################################################################################
# find missing proportions
df <- df[colSums(is.na(core_suicide))/nrow(core_suicide) < .3]
################################################################################
# find missing proportions
df <- core_suicide[colSums(is.na(core_suicide))/nrow(core_suicide) < .3]
################################################################################
rm(baseline, core, cores_wide, suicide_df)
################################################################################
rm(baseline, core, core_wide, suicide_df)
################################################################################
# find missing proportions
# colSums(is.na(df)) calculates number of missing in each column
# /nrow(core_suicide) divides by the number of rows to get the proportion
# < .3 used to subset columns with less than 30% missing
propmissingdf <- core_suicide[colSums(is.na(core_suicide))/nrow(core_suicide) < .3]
################################################################################
# 2. Examine data
names(df)
View(propmissingdf)
df_long <- reshape(core, idvar="Participant_ID", timevar="wave",direction ="long");
df_long <- reshape(core_suicide, idvar="Participant_ID", timevar="wave",direction ="long");
?reshape
core <- read.csv("../data/core.csv")
View(core)
# remove med data
core <- select(core, -Agomelatine:Zopiclone_Sat)
# remove med data
core <- select(core, Agomelatine:Zopiclone_Sat)
################################################################################
# Purpose: POINT - Suicide prediction with Machine Learning data preparation
# Author: Phillip Hungerford
# Date: 09/09/2019
################################################################################
# 0. Dependencies
library(mice)
# remove med data
drop  <- select(core, Agomelatine:Zopiclone_Sat)
drop <- names(drop)
core <- read.csv("../data/core.csv")
# remove med data
drop  <- select(core, Agomelatine:Zopiclone_Sat)
drop <- names(drop)
drop <- names(drop)
core = core[,!(names(core) %in% drop)]
core <- read.csv("../data/core.csv")
# remove med data
drop  <- select(core, Agomelatine:Zopiclone_Sat)
drop <- names(drop)
core <- core[,!(names(core) %in% drop)]
suicide_df <- baseline %>%
select('Participant_ID',
'wave',
'Suicide_Thoughts_ever',
'Suicide_Thoughts_age',
'Suicide_Thoughts_12m',
'Suicide_Plan_ever',
'Suicide_Plan_First_Age',
'Suicide_Attempt_Last_Age',
'Suicide_Plan_12m',
'Suicide_Attempt_12M',
'Suicide_Plan_Mthd_12m',
'Suicide_Plan_gun',
'Suicide_Plan_carb_monox',
'Suicide_Plan_cut_stab',
'Suicide_Plan_pills',
'Suicide_Plan_jump_height',
'Suicide_Plan_jump_train',
'Suicide_Plan_hang',
'Suicide_Plan_od_heroin',
'Suicide_Plan_od_op',
'Suicide_Plan_choke',
'Suicide_Plan_drown',
'Suicide_Plan_Other',
'Suicide_Attempt_ever',
'Suicide_Attempt_Num',
'Suicide_Attempt_First_Age',
'Suicide_Attempt_Mthd_12m',
'Suicide_Attempt_gun',
'Suicide_Attempt_carb_monox',
'Suicide_Attempt_cut_stab',
'Suicide_Attempt_pills',
'Suicide_Attempt_jump_hght',
'Suicide_Attempt_jump_train',
'Suicide_Attempt_hang',
'Suicide_Attempt_od_heroin',
'Suicide_Attempt_od_op',
'Suicide_Attempt_choke',
'Suicide_Attempt_drown',
'Suicide_Attempt_other',
'Suicide_Attempt_other_sp',
'Suicide_Statements',
'Suicidal_Thoughts_Ever',
'Suicidal_Plans_Ever',
'Suicide_Attempts_Ever',
'Suicidal_Thoughts_12m',
'Suicide_Attempts_12m')
################################################################################
# 1. Load data: T1 and core
baseline <- read.csv("../data/t1_beta.csv")
baseline$wave <- 0
# Extract the suicide question variables to add to core
suicide_df <- baseline %>%
select('Participant_ID',
'wave',
'Suicide_Thoughts_ever',
'Suicide_Thoughts_age',
'Suicide_Thoughts_12m',
'Suicide_Plan_ever',
'Suicide_Plan_First_Age',
'Suicide_Attempt_Last_Age',
'Suicide_Plan_12m',
'Suicide_Attempt_12M',
'Suicide_Plan_Mthd_12m',
'Suicide_Plan_gun',
'Suicide_Plan_carb_monox',
'Suicide_Plan_cut_stab',
'Suicide_Plan_pills',
'Suicide_Plan_jump_height',
'Suicide_Plan_jump_train',
'Suicide_Plan_hang',
'Suicide_Plan_od_heroin',
'Suicide_Plan_od_op',
'Suicide_Plan_choke',
'Suicide_Plan_drown',
'Suicide_Plan_Other',
'Suicide_Attempt_ever',
'Suicide_Attempt_Num',
'Suicide_Attempt_First_Age',
'Suicide_Attempt_Mthd_12m',
'Suicide_Attempt_gun',
'Suicide_Attempt_carb_monox',
'Suicide_Attempt_cut_stab',
'Suicide_Attempt_pills',
'Suicide_Attempt_jump_hght',
'Suicide_Attempt_jump_train',
'Suicide_Attempt_hang',
'Suicide_Attempt_od_heroin',
'Suicide_Attempt_od_op',
'Suicide_Attempt_choke',
'Suicide_Attempt_drown',
'Suicide_Attempt_other',
'Suicide_Attempt_other_sp',
'Suicide_Statements',
'Suicidal_Thoughts_Ever',
'Suicidal_Plans_Ever',
'Suicide_Attempts_Ever',
'Suicidal_Thoughts_12m',
'Suicide_Attempts_12m')
################################################################################
# make core wide
core_wide <- reshape(core, idvar="Participant_ID", timevar="wave",direction ="wide");
View(core_wide)
################################################################################
# right merge suicide df to core
core_suicide <- merge(x = core_wide, y = suicide_df, by = "Participant_ID")
################################################################################
# find missing proportions
# colSums(is.na(df)) calculates number of missing in each column
# /nrow(core_suicide) divides by the number of rows to get the proportion
# < .3 used to subset columns with less than 30% missing
df <- core_suicide[colSums(is.na(core_suicide))/nrow(core_suicide) < .5]
df_long <- reshape(core_suicide, idvar="Participant_ID", timevar="wave", direction ="long");
################################################################################
rm(baseline, core, core_wide, suicide_df)
rm(df)
rm(propmissingdf)
View(core_suicide)
core <- read.csv("../data/core.csv")
baseline <- read.csv("../data/t1_beta.csv") # 1514,2903
baseline$wave <- 0
core <- read.csv("../data/core.csv") # 7578,1055
# remove med data
drop  <- select(core, Agomelatine:Zopiclone_Sat) # 841
drop <- names(drop)
core <- core[,!(names(core) %in% drop)]
################################################################################
# Extract the suicide question variables to add to core
suicide_df <- baseline %>%
select('Participant_ID',
'wave',
'Suicide_Thoughts_ever',
'Suicide_Thoughts_age',
'Suicide_Thoughts_12m',
'Suicide_Plan_ever',
'Suicide_Plan_First_Age',
'Suicide_Attempt_Last_Age',
'Suicide_Plan_12m',
'Suicide_Attempt_12M',
'Suicide_Plan_Mthd_12m',
'Suicide_Plan_gun',
'Suicide_Plan_carb_monox',
'Suicide_Plan_cut_stab',
'Suicide_Plan_pills',
'Suicide_Plan_jump_height',
'Suicide_Plan_jump_train',
'Suicide_Plan_hang',
'Suicide_Plan_od_heroin',
'Suicide_Plan_od_op',
'Suicide_Plan_choke',
'Suicide_Plan_drown',
'Suicide_Plan_Other',
'Suicide_Attempt_ever',
'Suicide_Attempt_Num',
'Suicide_Attempt_First_Age',
'Suicide_Attempt_Mthd_12m',
'Suicide_Attempt_gun',
'Suicide_Attempt_carb_monox',
'Suicide_Attempt_cut_stab',
'Suicide_Attempt_pills',
'Suicide_Attempt_jump_hght',
'Suicide_Attempt_jump_train',
'Suicide_Attempt_hang',
'Suicide_Attempt_od_heroin',
'Suicide_Attempt_od_op',
'Suicide_Attempt_choke',
'Suicide_Attempt_drown',
'Suicide_Attempt_other',
'Suicide_Attempt_other_sp',
'Suicide_Statements',
'Suicidal_Thoughts_Ever',
'Suicidal_Plans_Ever',
'Suicide_Attempts_Ever',
'Suicidal_Thoughts_12m',
'Suicide_Attempts_12m')
################################################################################
# make core wide
core_wide <- reshape(core, idvar="Participant_ID", timevar="wave",direction ="wide");
################################################################################
# find missing proportions
# colSums(is.na(df)) calculates number of missing in each column
# /nrow(core_suicide) divides by the number of rows to get the proportion
# < .3 used to subset columns with less than 30% missing
#df <- core_suicide[colSums(is.na(core_suicide))/nrow(core_suicide) < .5]
propmissing <- colSums(is.na(core_suicide))/nrow(core_suicide)
propmissing
################################################################################
# find missing proportions
# colSums(is.na(df)) calculates number of missing in each column
# /nrow(core_suicide) divides by the number of rows to get the proportion
# < .3 used to subset columns with less than 30% missing
#df <- core_suicide[colSums(is.na(core_suicide))/nrow(core_suicide) < .5]
propmissing <- round((colSums(is.na(core_suicide))/nrow(core_suicide)),2)
propmissing
max(propmissing)
################################################################################
# find missing proportions
# colSums(is.na(df)) calculates number of missing in each column
# /nrow(core_suicide) divides by the number of rows to get the proportion
# < .3 used to subset columns with less than 30% missing
#df <- core_suicide[colSums(is.na(core_suicide))/nrow(core_suicide) < .5]
propmissing <- sort(round((colSums(is.na(core_suicide))/nrow(core_suicide)),2),decreasing=TRUE)
propmissing[1]
propmissing[2]
propmissing[3]
propmissing[4]
propmissing[5]
df <- core_suicide[colSums(is.na(core_suicide))/nrow(core_suicide) < .5]
df <- core_suicide[colSums(is.na(core_suicide))/nrow(core_suicide) < .5]
################################################################################
# Purpose: POINT - Suicide prediction with Machine Learning data preparation
# Author: Phillip Hungerford
# Date: 09/09/2019
################################################################################
# 0. Dependencies
library(mice)
library(VIM)
library(lattice)
library(dplyr)
library(reshape)
################################################################################
# 1. Load data: T1 and core
baseline <- read.csv("../data/t1_beta.csv") # 1514,2903
baseline$wave <- 0
core <- read.csv("../data/core.csv") # 7578,1055
# remove med data
drop  <- select(core, Agomelatine:Zopiclone_Sat) # 841
drop <- names(drop)
core <- core[,!(names(core) %in% drop)] # 7578, 214
################################################################################
# Extract the suicide question variables to add to core
# suicide_df shape = 1514, 46
suicide_df <- baseline %>%
select('Participant_ID',
'wave',
'Suicide_Thoughts_ever',
'Suicide_Thoughts_age',
'Suicide_Thoughts_12m',
'Suicide_Plan_ever',
'Suicide_Plan_First_Age',
'Suicide_Attempt_Last_Age',
'Suicide_Plan_12m',
'Suicide_Attempt_12M',
'Suicide_Plan_Mthd_12m',
'Suicide_Plan_gun',
'Suicide_Plan_carb_monox',
'Suicide_Plan_cut_stab',
'Suicide_Plan_pills',
'Suicide_Plan_jump_height',
'Suicide_Plan_jump_train',
'Suicide_Plan_hang',
'Suicide_Plan_od_heroin',
'Suicide_Plan_od_op',
'Suicide_Plan_choke',
'Suicide_Plan_drown',
'Suicide_Plan_Other',
'Suicide_Attempt_ever',
'Suicide_Attempt_Num',
'Suicide_Attempt_First_Age',
'Suicide_Attempt_Mthd_12m',
'Suicide_Attempt_gun',
'Suicide_Attempt_carb_monox',
'Suicide_Attempt_cut_stab',
'Suicide_Attempt_pills',
'Suicide_Attempt_jump_hght',
'Suicide_Attempt_jump_train',
'Suicide_Attempt_hang',
'Suicide_Attempt_od_heroin',
'Suicide_Attempt_od_op',
'Suicide_Attempt_choke',
'Suicide_Attempt_drown',
'Suicide_Attempt_other',
'Suicide_Attempt_other_sp',
'Suicide_Statements',
'Suicidal_Thoughts_Ever',
'Suicidal_Plans_Ever',
'Suicide_Attempts_Ever',
'Suicidal_Thoughts_12m',
'Suicide_Attempts_12m')
################################################################################
# make core wide, core_wide shape = 1514,1273
core_wide <- reshape(core, idvar="Participant_ID", timevar="wave",direction ="wide");
characteristicsData <- read.csv("../data/interim/characteristicsData.csv")
characteristicsData <- read.csv("../../data/interim/characteristicsData.csv")
characteristicsData <- read.csv("../data/t1_beta.csv")
baseline <- read.csv("../data/t1_beta.csv")
baseline <- read.csv("../data/t1_beta.csv")
core <- read.csv("../data/core.csv")
overdose_calc <- function(data, desired_wave){
# 1. subset to desired year
# 2. Subset based on those who have overdosed
# 3. Use unique to get a set of the list of p
tmp <- subset(data, wave==desired_wave)
tmp <- subset(tmp, f.number_overdoses > 0)
participants <- unique(tmp$id)
return(participants)
}
unique_calc <- function(){
t1_participants <- overdose_calc(data=core, desired_wave=0)
t3_participants <- overdose_calc(data=core, desired_wave=1)
t4_participants <- overdose_calc(data=core, desired_wave=2)
t5_participants <- overdose_calc(data=core, desired_wave=3)
t6_participants <- overdose_calc(data=core, desired_wave=4)
t7_participants <- overdose_calc(data=core, desired_wave=5)
all_participants <- c(t1_participants,
t3_participants,
t4_participants,
t5_participants,
t6_participants,
t7_participants)
all_participants <- unique(all_participants)
cat("\nThere are ", length(all_participants),
"number of different people who have overdosed across the 6 years.")
return(all_participants)
}
all_participants <- unique_calc()
core.head()
head(core)
suicide_df <- subset(core, Suicide_Thoughts_12m == "Yes")
suicide_df <- subset(core, Suicide_Thoughts_12m == "Yes")
head(suicide_df)
overdose_calc <- function(data, desired_wave){
# 1. subset to desired year
# 2. Subset based on those who have overdosed
# 3. Use unique to get a set of the list of p
tmp <- subset(data, wave==desired_wave)
tmp <- subset(tmp, Suicide_Thoughts_12m == "Yes")
participants <- unique(tmp$id)
return(participants)
}
unique_calc <- function(){
t1_participants <- overdose_calc(data=core, desired_wave=0)
t3_participants <- overdose_calc(data=core, desired_wave=1)
t4_participants <- overdose_calc(data=core, desired_wave=2)
t5_participants <- overdose_calc(data=core, desired_wave=3)
t6_participants <- overdose_calc(data=core, desired_wave=4)
t7_participants <- overdose_calc(data=core, desired_wave=5)
all_participants <- c(t1_participants,
t3_participants,
t4_participants,
t5_participants,
t6_participants,
t7_participants)
all_participants <- unique(all_participants)
cat("\nThere are ", length(all_participants),
"number of different people who have overdosed across the 6 years.")
return(all_participants)
}
all_participants <- unique_calc()
suicide_df <- subset(core, Suicide_Thoughts_12m == "Yes")
core$Suicide_Thoughts_12m
overdose_calc <- function(data, desired_wave){
# 1. subset to desired year
# 2. Subset based on those who have overdosed
# 3. Use unique to get a set of the list of p
tmp <- subset(data, wave==desired_wave)
tmp <- subset(tmp, Suicide_Thoughts_12m == 1)
participants <- unique(tmp$id)
return(participants)
}
unique_calc <- function(){
t1_participants <- overdose_calc(data=core, desired_wave=0)
t3_participants <- overdose_calc(data=core, desired_wave=1)
t4_participants <- overdose_calc(data=core, desired_wave=2)
t5_participants <- overdose_calc(data=core, desired_wave=3)
t6_participants <- overdose_calc(data=core, desired_wave=4)
t7_participants <- overdose_calc(data=core, desired_wave=5)
all_participants <- c(t1_participants,
t3_participants,
t4_participants,
t5_participants,
t6_participants,
t7_participants)
all_participants <- unique(all_participants)
cat("\nThere are ", length(all_participants),
"number of different people who have experienced suicidal thoughts across the 6 years.")
return(all_participants)
}
all_participants <- unique_calc()
baseline <- read.csv("../data/t1_beta.csv")
core <- read.csv("../data/core_labels.csv")
suicide_df <- subset(core, Suicide_Thoughts_12m == "Yes")
suicide_df <- subset(core, Suicide_Thoughts_12m == "Yes")
core$Suicide_Thoughts_12m
test_df = reshape2::dcast(
dplyr::mutate(
reshape2::melt(core,id.var="Participant_ID"),
value=plyr::mapvalues(
value, c("Refuse to Answer","Not Applicable"),c(NA, NA))
),name~variable)
test_df = reshape2::dcast(
dplyr::mutate(
reshape2::melt(core,id.var="Participant_ID"),
value=plyr::mapvalues(
value, c("Refuse to Answer","Not Applicable"),c(NA, NA))
),Participant_ID ~ .)
